num.spill<-sum(spill)
num.spill # number of replications where mug total > 260ml
# as proportion
prop.spill <- (num.spill/10000)*100
prop.spill #proportion of times coffee spills
n <- 10000
coffee <- rnorm(n, 50, 15)
milk <- rnorm(n, 175, 15)
overflow <- sum((coffee + milk) > 260)
print(overflow)
print(overflow/n)
n <- 10000
coffee <- rnorm(n, 50, 15)
milk <- rnorm(n, 175, 15)
replications <- data.frame(coffee, milk)
no.of.spillage <- nrow(subset(replications, coffee+milk > 260))
no.of.spillage
proportion.of.spillage <- no.of.spillage / n
proportion.of.spillage
percentage.of.spillage <- proportion.of.spillage*100
percentage.of.spillage
n <- 10000
friend.1 <- runif(n, 0, 60)
friend.2 <- runif(n, 0, 60)
Replication <- sum(friend.1 - friend.2 <= 15)
#Since, 10000 is the number of simulations performed
proportion_times <- Replication/n
proportion_times
Number_of_Meetings <- sum(abs(friend.1 - friend.2) <= 15)
print(Number_of_Meetings)
Prob_of_meeting <- Number_of_Meetings/n
print(Prob_of_meeting)
diff <- abs(friend.1 - friend.2)
num_meets <- length(diff[diff < 15])
proportion <- num_meets / n
proportion
mean(abs(friend.1-friend.2)<=15)
success_window <- 15
# time between friends arrivals, regardless of who arrived first
arrival_diffs <- abs(friend.1 - friend.2)
# number of successful arrivals
n.success <- sum(arrival_diffs <= success_window)
n.success
# proportion of successful arrivals from all replications
p.success <- n.success / n
p.success
n <- 10000
friend.1 <- runif(n, 0, 60)
friend.2 <- runif(n, 0, 60)
sum((friend.1 <= 15) & (friend.2 <= 15))
# Do they meet?
friend.1.waits <- (friend.2>=friend.1&friend.2<=(friend.1+15))
friend.2.waits <- (friend.1>=friend.2&friend.1<=(friend.2+15))
# Perform a union of these outcomes (in boolean logic, this means using OR)
friends_events <- (friend.1.waits|friend.2.waits)
# Probability that they meet
friends_meet <- length(friends_events[friends_events==TRUE])
probability_friends_meet <- friends_meet/10000
# Probability that they don't meet
friends_dont_meet <- length(friends_events[friends_events==FALSE])
probability_friends_dont_meet <- friends_dont_meet/10000
# Sum of probabilities should be equal to 1
probability_friends_meet+probability_friends_dont_meet==1
probability_friends_dont_meet
probability_friends_meet
sum(abs(friend.1-friend.2) <= 15)
# The friends will meet up if they arrive within 15 minutes of each other
arrival.difference <- abs(friend.1 -friend.2)
meet <- arrival.difference <= 15
# Number of successful meetings
meet.successful <- length(meet[meet==TRUE])
meet.unsuccessful <- length(meet[meet==FALSE])
# Check successful and unsuccessful meetings add up to n
meet.successful + meet.unsuccessful == n
# Proportion of times the friends manage to meet
meet.proportion <- meet.successful/n
# Print summary of meet ups
cat("The friends successfully meet up if they arrive within 15 minutes of each other.\n",
"The friends tried to meet up", n, "times and successfully met up", meet.successful, "times.\n",
"This means that the friends would have successfully met up", meet.proportion, "of the time.")
# The friends manage to meet up if there is 15 mins or less between them arriving.
# So we would first compute the difference in time between them
DeltaT <- friend.1-friend.2
# No we make the data absolute in order for ease of comparison to the threshold of 15 mins
absDelta <- sqrt(DeltaT^2)
# get indexes of times they would meet (smaller or equal to 15 mins)
i_meet<-which(absDelta<=15)
# get the length of i_meet
nm<-length(i_meet)
# this as a portion of the the total number gives
p<-nm/n
p
d <- friend.1-friend.2ã€€#define the difference in arriving time of A and B
sum((d<15 & d>-15))
data<-cbind(friend.1,friend.2,diff=abs(friend.1-friend.2),index=1)
data<-as.data.frame(data)
data
#1
count<-sum(subset(data,diff<=15)$index)
count
#2
propor<-count/n
propor
//probabilty of the intersection between friend 1 and friend 2
both.friends<-cbind(a=friend.1,b=friend.2)
friends1.diff<-both.friends[a]-both.friends[b]
sub<-c(both.friends[(friends1.diff>0 & friends1.diff<=15)|(friends2.diff > 0 & friends2.diff<=15)
])
friends1.diff<-both.friends["a"]-both.friends["b"]
friends2.diff<- both.friends["b"] -both.friends["a"]
sub<-c(both.friends[(friends1.diff>0 & friends1.diff<=15)|(friends2.diff > 0 & friends2.diff<=15)
])
length(sub)
friends1.diff
both.friends
both.friends <- data.frame(a=friend.1,b=friend.2)
friends1.diff<-both.friends[a]-both.friends[b]
friends1.diff<-both.friends["a"]-both.friends["b"]
friends2.diff<- both.friends["b"] -both.friends["a"]
sub<-c(both.friends[(friends1.diff>0 & friends1.diff<=15)|(friends2.diff > 0 & friends2.diff<=15)
])
length(sunb)
length(sub)
both.friends[(friends1.diff>0 & friends1.diff<=15)|(friends2.diff > 0 & friends2.diff<=15)
]
both.friends["a"]
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/movies.RData"))
movies[movies$Release == "Postcards from London",]$Gross
movies$Release
movies$Release=="Postcards from London"
movies[movies$Release=="Postcards from London",]
movies[which.max(movies$Gross),]
movies[which.max(movies$Theaters),]
sum(subset(movies, movies$Distributor ==  "Paramount Pictures")$Gross)
sum(subset(movies, movies$Theaters >= 1000)$Gross) / nrow(subset(movies, movies$Theaters >= 1000))
sum(subset(movies, movies$Theaters >= 1000)$Gross)
nrow(subset(movies, movies$Theaters >= 1000))
nrow(movies)
movies[order(movies$Theaters, decreasing= TRUE) [1], ]
sum(subset(movies, Dist="Paramount Pictures")$Gross)
sum(subset(movies, Distributor="Paramount Pictures")$Gross)
movies$Distributor
subset(movies, Distributor="Paramount Pictures")
length(subset(movies, Distributor="Paramount Pictures"))
nrow(subset(movies, Distributor="Paramount Pictures"))
nrow(subset(movies, Dist="Paramount Pictures"))
sum(subset(movies, movies$Distributor ==  "Paramount Pictures")$Gross)
sum(subset(movies, Dist="Paramount Pictures")$Gross)
sum(subset(movies, movies$Dist="Paramount Pictures")$Gross)
sum(subset(movies, movies$Distributor="Paramount Pictures")$Gross)
sum(subset(movies, movies$Distributor=="Paramount Pictures")$Gross)
sum(movies$Gross)
mean(subset(movies, Theaters>1000)$Grossperthreater)
mean(subset(movies, movies$Theaters>1000)$Grossperthreater)
mean(subset(movies, movies$Theaters>1000))
mean(subset(movies, movies$Theaters>1000)$Gross)
mean(subset(movies, Theaters >= 1000)$Gross)
mean(subset(movies, Theaters>1000)$Gross)
subset(movies, Release == "Postcards from London")$Gross
# 2 Find the movie with the largest gross revenue as well as the movie being shown in most theatres.
subset(movies, Gross == max(Gross))$Release
subset(movies, Theaters == max(Theaters, na.rm = TRUE))$Release
max(movies$Gross)
subset(movies, Gross == max(Gross))
mean(subset(movies, Theaters >= 1000)$Gross)
movies[movies$Release=="Postcards from London","Gross"]
movies[movies$Gross==MoviesWithLargestGrossRevenue$Gross,"Release"]
MoviesWithLargestGrossRevenue <- movies[order(movies$Gross, decreasing=TRUE)[1],]
movies[movies$Gross==MoviesWithLargestGrossRevenue$Gross,"Release"]
MoviesBeingShownInMostThreatres <- movies[order(movies$Theaters, decreasing=TRUE)[1],]
movies[movies$Theaters==MoviesBeingShownInMostThreatres$Theaters,"Release"]
sum(subset(movies,Distributor=="Paramount Pictures")$Gross,na.rm=TRUE)
mean(subset(movies,Theaters>=1000)$Gross,na.rm=TRUE)
#1
sum(subset(movies,Release=="Postcards from London")$Gross)
#2
grossmax<-movies[which.max(movies$Gross),]
grossmax
theamax<-movies[which.max(movies$Theaters),]
theamax
sum(subset(movies,Distributor=="Paramount Pictures")$Gross)
mean(subset(movies,Theaters>=1000)$Gross)
subset(movies, Gross == max(Gross)| Theaters == max(Theaters))$Release
#part e: Average Gross, >1000 theaters
#Getting rows with theater >= 1000
movies <- transform(movies, yes1000 = cut(movies$Theaters, breaks = c(0, 999, Inf), labels = c('no','yes')))
subset(movies, yes1000 == 'yes')
#Average
averageGrossIncome <- sum(subset(movies, yes1000 == 'yes')$Gross) / nrow(subset(movies, yes1000 == 'yes'))
averageGrossIncome
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/movies.RData"))
movies[which.max(movies$Theaters), 1]
movies[which.max(movies$Gross), 1]
subset(movies, Release == "Postcards from London")$Gross
sum(subset(movies, Distributor == "Paramount Pictures")$Gross)
mean(movies[movies$Theaters >=1000, 2], na.rm = TRUE)
movies[movies$Release=="Postcards from London","Gross"]
as.character(movies[which.max(movies$Gross),"Release"])
as.character(movies[which.max(movies$Theaters),"Release"])
sum(movies[movies$Distributor=="Paramount Pictures","Gross"], na.rm = TRUE)
mean(movies[movies$Theaters>=1000,"Gross"], na.rm = TRUE)
movies[movies$Release=="Postcards from London","Gross"]
movies[!is.na(movies$Gross) & abs(movies$Gross-max(movies$Gross, na.rm = TRUE))<0.000001, "Release"]
movies[!is.na(movies$Theaters) & abs(movies$Theaters-max(movies$Theaters, na.rm = TRUE))<0.000001, "Release"]
sum(movies[movies$Distributor == "Paramount Pictures", "Gross"])
theater_at_least_1000 <- movies[!is.na(movies$Theaters) & (movies$Theaters >= 1000), "Gross"]
sum(theater_at_least_1000) / length(theater_at_least_1000)
movies[movies$Release=="Postcards from London","Gross"]
movies[order(movies$Gross, decreasing =TRUE)[1],]
movies[order(movies$Theaters, decreasing=TRUE)[1],]
aggregate(movies$salary, by=list(movies$Distributor), FUN=sum)
aggregate(movies, by=list(movies$Distributor), FUN=sum)
subset(movies, Theaters>1000)
#What was the gross revenue of the movie "Postcards from London"?
subset(movies, Release == "Postcards from London", 2)
#Find the movie with the largest gross revenue as well as the movie being shown in most theatres.
movies[which.max(movies$Gross),]
movies[which.max(movies$Theaters),]
pp = subset(movies, Distributor == "Paramount Pictures")
sum(pp$Gross)
agi = subset(movies, Theaters >= 1000)
mean(agi$Gross)
movies[order(movies$Gross,decreasing=TRUE)[1],]$Release
movies[order(movies$Theaters,decreasing=TRUE)[1],]$Release
sum(subset(movies,Distributor=="Paramount Pictures")$Gross)
mean(subset(movies,Theaters>=1000)$Gross)
movies[order(movies$Gross,decreasing=TRUE)[1],"Release"]
movies[order(movies$Theaters, decreasing=TRUE)[1],"Release"]
sum(subset(movies, Distributor=="Paramount Pictures")$Gross)
MoviesThousandTheatres <- subset(movies, Theaters >= 1000)
MoviesThousandTheatresAverageIncome <- mean(MoviesThousandTheatres$Gross)
MoviesThousandTheatresAverageIncome
movies[movies$Release=="Postcards from London","Gross"]
movies[order(movies$Gross, decreasing = TRUE) [1],]
movies[which.max(movies$Theaters), ]
sum(subset(movies, Distributor=="Paramount Pictures")$Gross)
movie2 <- subset(movies, Theaters > 1000)
mean(movie2$Gross, na.rm=TRUE)
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/movies.RData"))
# i) Gross revenue of 'Postcards from London'
movies$Gross[movies$Release == "Postcards from London"]
# iia) Movie with largest gross revenue
highest_grossing_permut <- order(movies$Gross, decreasing = TRUE)
highest_grossing <- movies[highest_grossing_permut, ][1, "Release"]
cat("Movie with the largest gross revenue:", as.character(highest_grossing))
#Alternative answer
movies[which.max(movies$Gross), "Release"]
# iib) Movie shown in the most theatres
most_theatres_permut <- order(movies$Theaters, decreasing = TRUE)
most_theatres <- movies[most_theatres_permut, ][1, "Release"]
cat("Movie shown in the most theatres:", as.character(most_theatres))
#Alternative answer
movies[which.max(movies$Theaters), "Release"]
# iii) Add a new column GrossPerTheater
movies <- transform(movies, GrossPerTheater = Gross / Theaters)
# iv) Total revenue for movies distributed by Paramount Pictures
paramount_movies <- subset(movies, Distributor == "Paramount Pictures")
sum(paramount_movies$Gross)
# v) Average gross income for movies shown in at least 1,000 theaters
big_releases <- subset(movies, Theaters >= 1000)
mean(big_releases$Gross)
subset(movies, Release == "Postcards from London")$Gross
permut <- order(movies$Gross, decreasing=TRUE)
largest_gross = subset(movies[permut,][1,])
largest_gross
permut <- order(movies$Theaters, decreasing=TRUE)
most_theatres = subset(movies[permut,][1,])
most_theatres
sum(subset(movies, Distributor == "Paramount Pictures")$Gross)
mean(subset(movies, Theaters >= 1000)$Gross)
movies[which.max(movies$Gross),]
movies[which.max(movies$Theaters),]
sum(subset(movies, Distributor=="Paramount Pictures"
)$Gross)
mean(subset(movies, Theaters >= 1000)$Gross)
movies[movies$Release=="Postcards from London","Gross"]
movies[order(movies$Gross, decreasing=TRUE)[1],]
movies[order(movies$Theaters, decreasing=TRUE)[1],]
Paramount <- movies[movies$Distributor=="Paramount Pictures",]
sum(Paramount[, "Gross"])
Average <- movies[movies$Theaters >= "1000",]
total <- sum(Average[, "Gross"], na.rm = TRUE)
totalmovie <- nrow(Average)
AverageGross <- total / totalmovie
print(AverageGross)
total
totalmovie
total/totalmovie
mean(subset(movies, Theaters >= 1000)$Gross)
subset(movies, Theaters >= 1000)
nrow(subset(movies, Theaters >= 1000))
mean(Average$Gross)
Average
Average$Gross
mean(Average$Gross)
la <- nrow(subset(movies, Theaters >= 1000))
mean(la)
mean(la$Gross)
la
la <- (subset(movies, Theaters >= 1000))
mean(la$Gross)
dim(la)
dim(Average)
Average <- movies[movies$Theaters >= 1000,]
dim(Average)
mean(Average$Gross)
hist(Average$Gross)
mean(Average$Gross,na.rm=T)
dim(movies)
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/lakes.RData"))
lakes["Loch Assynt",]$SurfaceArea
mean(lakes$pH)
lakes$lake <- row.names(lakes)
#  pick lake with minimum pH
lakes[which.min(lakes$pH),]$lake
ord <- order(lakes$SurfaceArea, decreasing = TRUE)
sum(lakes[ord,][1:10,]$TotalBiovolume)
lakes["Loch Assynt",]$SurfaceArea
mean(subset(lakes)$pH)
lakes[which.min(lakes$pH),]
sum(lakes[order(lakes$SurfaceArea,decreasing = TRUE)[1:10],]$TotalBiovolume)
lakes["Loch Assynt","SurfaceArea"]
sum(lakes$pH)/nrow(lakes)
lakes[order(lakes$pH)[1],][4]
Top10<-lakes[order(lakes$SurfaceArea, decreasing=TRUE)[1:10],]
CombinedBiovolume<-sum(Top10$TotalBiovolume)
CombinedBiovolume
lakes['Loch Assynt', 'SurfaceArea']
mean(lakes$pH)
lakes[which.min(lakes$pH),]
ordered_lakes <- lakes[order(lakes$SurfaceArea, decreasing = TRUE),]
sum(ordered_lakes[1:10, "TotalBiovolume"])
loch.assynt <- lakes["Loch Assynt",]
loch.assynt["SurfaceArea"]
ph.values <- lakes$pH
#use mean to calculate average pH
mean(ph.values)
ph.ordered <- lakes[order(lakes$pH, decreasing=FALSE)[1],]
ph.ordered
#order the lakes by "SurfaceArea" decreasing and return top 10
largest.lakes <- lakes[order(lakes$SurfaceArea, decreasing=TRUE)[1:10],]
largest.lakes
#return largest.lakes to confirm subset correct
#create a new set containing only "TotalBiovolume"
largest.lakes.biovolume <- largest.lakes$TotalBiovolume
sum(largest.lakes.biovolume)
sum(subset(lakes[order(lakes$SurfaceArea, decreasing=TRUE)[1:10],])$TotalBiovolume)
Loch_Assynt <- subset(lakes,lakes$Names == 'Loch Assynt')
print(Loch_Assynt$SurfaceArea)
Ave_pH <- mean(lakes$pH)
print(Ave_pH)
Most_acidic <- subset(lakes, lakes$pH == min(lakes$pH))
print(Most_acidic$Names)
lakes <- transform(lakes, Volume = lakes$SurfaceArea * lakes$MeanDepth)
Lakes_by_SA <- order(lakes$SurfaceArea, decreasing = TRUE)
Top_10_SA <- lakes[Lakes_by_SA,]
Top_10_SA <- Top_10_SA[1:10,]
print(sum(Top_10_SA$TotalBiovolume))
Most_acidic
Ave_pH
surface_area_loch_assynt <- lakes['Loch Assynt', 'SurfaceArea']
print(surface_area_loch_assynt)
mean(lakes$pH)
lakes[which.min(lakes$pH),]
#What is the combined total biovolume of the 10 largest lakes (in the sense of having the largest surface areas)?
largest_lakes <- lakes[order(lakes$SurfaceArea, decreasing=TRUE)[1:10],]
print(largest_lakes)
combined_totalbiovolume <- sum(largest_lakes$TotalBiovolume)
print(combined_totalbiovolume)
lakes[order(lakes$pH, decreasing=FALSE)[1],]
largest.lakes <- lakes[order(lakes$SurfaceArea, decreasing=TRUE)[1:10],]
largest.lakes #return 10 largest lakes
sum(largest.lakes$TotalBiovolume) #combined total biovolume
sum(lakes[order(lakes$SurfaceArea, decreasing = TRUE)[1:10],]$TotalBiovolume)
largest_lakes <- lakes[order(lakes$SurfaceArea, decreasing = TRUE)[1:10], ]
sum(largest_lakes$TotalBiovolume, na.rm = TRUE)
flow <- read.table(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/flow.txt"))
flow
library(tidyverse)
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Week%205/w5.RData"))
qplot(HealthExpenditure,LifeExpectancy,data=health,colour=Region)
qplot(HealthExpenditure,LifeExpectancy,data=health,colour=Region,size=Population)
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy) +
geom_point(aes(colour=Region,size=Population))
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy) +
geom_point(aes(colour=Region,size=Population)) +
geom_smooth(method="lm") +
scale_x_log10()
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy,colour=Region) +
geom_point(aes(size=Population)) +
geom_smooth(method="lm") +
scale_x_log10()
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy,colour=Region) +
geom_point(aes(size=Population)) +
geom_smooth(method="lm") +
scale_x_log10() +
ggtitle("Relationship between Health Expenditure and Life Expectancy") +
xlab("Health Expenditure") +
ylab("Life Expectancy")
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy) +
geom_point(aes(colour=Population)) +
scale_color_brewer(palette="YlOrRd",trans="log")+
ggtitle("Relationship between Health Expenditure and Life Expectancy") +
xlab("Health Expenditure") +
ylab("Life Expectancy")
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy) +
geom_point(aes(colour=Population)) +
scale_color_brewer(palette="YlOrRd")+
ggtitle("Relationship between Health Expenditure and Life Expectancy") +
xlab("Health Expenditure") +
ylab("Life Expectancy")
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy) +
geom_point(aes(colour=Population)) +
scale_color_distiller(palette="YlOrRd")+
ggtitle("Relationship between Health Expenditure and Life Expectancy") +
xlab("Health Expenditure") +
ylab("Life Expectancy")
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy) +
geom_point(aes(colour=Population)) +
scale_color_distiller(palette="YlOrRd",trans="log")+
ggtitle("Relationship between Health Expenditure and Life Expectancy") +
xlab("Health Expenditure") +
ylab("Life Expectancy")
ggplot(data=health) +
geom_bar(aes(x=Region))
ggplot(data=health) +
geom_bar(aes(x=Region)) +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy) +
geom_point(aes(colour=Population)) +
scale_color_distiller(palette="YlOrRd",trans="log")+
ggtitle("Relationship between Health Expenditure and Life Expectancy") +
xlab("Health Expenditure") +
ylab("Life Expectancy") + theme_minimal()
scale_x_log10()+
facet_wrap(~Region)
ggplot(data=health) + aes(x=HealthExpenditure,y=LifeExpectancy,colour=Region) +
geom_point(aes(size=Population)) +
geom_smooth(method="lm") +
scale_x_log10()+
facet_wrap(~Region)
?rnorm
hist(rnorm(1000))
hist(rnorm(1000,sd=0.1))
hist(rnorm(1000))*0.1
hist(rnorm(1000)*0.1)
hist(rnorm(1000,sd=0.1))
sqrt(0.1)
install.packages("palmerpenguins")
x <- c(1,2,3)
seq_along(x)
?seq_along
NA - 2
setwd("~/Documents/GitHub/R/Assignment 1")
?read.table
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/movies.RData"))
is.na(movies)
table(is.na(Movies$Theaters))
table(is.na(Movies$Theatres))
table(is.na(movies$Theatres))
table(is.na(movies$Theaters))
mean(subset(movies, Theaters >= 1000,na.rm=T)$Gross)
## QUESTION 1
A <- diag(c(2,4,6,8))
A[1,3] <- 5
A[3,4] <- 7
A[4,2] <- 3
A
B <- rbind(c(2,0,5,0),c(0,4,0,0),c(0,0,6,7),c(0,3,0,8))
B
flow <- read.table("flow.txt",header=TRUE,sep=",",na.strings = "-")
view(flow)
View(flow)
## QUESTION 3
n <- 10000
friend.1 <- runif(n,0,60)
friend.2 <- runif(n,0,60)
hist(friend.1)
head(friend.1)
abs(friend.1 - friend.2) <= 15
sum(abs(friend.1 - friend.2) <= 15)
sum(abs(friend.1 - friend.2) <= 15)/n
## QUESTION 4
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/movies.RData"))
View(movies)
# a
movies[movies$Release=="Postcards from London",]
# a
movies[movies$Release=="Postcards from London","Gross"]
# a
movies[movies$Release=="Postcards from London",]$Gross
View(movies)
# Gross
which.max(movies$Gross)
# Gross
movies[which.max(movies$Gross),"Release"]
# Gross
as.character(movies[which.max(movies$Gross),"Release"])
order(movies$Theaters)
order(movies$Theaters,decreasing = TRUE)
order(movies$Theaters,decreasing = TRUE)[1]
movies[order(movies$Theaters,decreasing = TRUE)[1],]
movies[order(movies$Theaters,decreasing = TRUE)[1],"Release"]
movies <- transform(movies,GrossPerTheatre=Gross/Theaters)
View(movies)
subset(movies,Distributor=="Paramount Pictures")
subset(movies,Distributor=="Paramount Pictures")$Gross
sum(subset(movies,Distributor=="Paramount Pictures")$Gross)
subset(movies, Theaters>=1000,na.rm=T)$Gross
mean(subset(movies, Theaters>=1000,na.rm=T)$Gross)
sub_movies <- subset(movies, Theaters>=1000,na.rm=T)$Gross
hist(sub_movies)
