login_session <- session_submit(x=session,form=filled_form)
login_session
login_session$url
# Now, let's look at the main page for the data
data_page <- "https://moodle.gla.ac.uk/mod/assign/view.php?id=1562679&action=grading"
data_session <- jump_to("https://moodle.gla.ac.uk/mod/assign/view.php?id=1562679&action=grading")
data_session <- login_session %>% session_jump_to("https://moodle.gla.ac.uk/mod/assign/view.php?id=1562679&action=grading")
html_elements(data_session)
data_session %>% html_elements()
data_session$cache
data_session$handle
data_session$config
data_session$response
data_session$back
data_session$response
library(httr)
status_code(data_session)
content_raw <- content(data_session$response,as="raw")
content_raw
content_raw <- content(data_session$response,as="text")
content_raw
content_raw <- content(data_session$response,as="parsed")
content_raw
content_raw[1]
content_raw$doc
content_raw$raw
library(stringr)
structure(content_raw)
data_session %>% html_elements()
data_session %>% html_nodes()
data_session %>% html_nodes("*")
data_session %>% html_nodes("*") %>% html_attr("class") %>% unique()
ds1 <- data_session %>% html_nodes("*") %>% html_attr("class") %>% unique()
head(ds1)
ds1[7:11]
ds1[95:100]
class(data_session)
class(data_session$response)
read_html(data_page)
class(read_html(data_page))
data_session$response %>% html_nodes(".student_read_icon")
datpage <- read_html(data_page)
datpage %>% html_nodes(".student_read_icon")
datpage
datpage %>% html_nodes(".c7")
datpage %>% html_nodes(".c13")
datpage %>% html_nodes("d-inline-block mr-0")
datpage %>% html_nodes(".d-inline-block mr-0")
datpage %>% html_nodes("*")
datpage %>% html_nodes("<title>University of Glasgow Moodle: Log in to the site</title>\n")
datpage %>% html_nodes(".icon")
datpage %>% html_elements(".icon")
data_session %>%html_elements()
data_session %>%html_elements("*")
data_session %>%html_elements(".icon")
datpage %>% html_elements(".student_read_icon")
datpage <- html_session(data_page)
datpage %>% html_elements(".student_read_icon")
datpoage
datpage
datpage %>% html_elements(".icon")
datpage %>% html_elements("*")
data_session
data_session %>%html_nodes(".icon")
data_session %>%html_nodes(".student_read_icon")
data_session %>%html_nodes(".c13") # Turnitin Status
data_session %>%html_nodes(".student_read_icon") %>% html_text() # Turnitin Status
data_session %>%html_nodes(".student_read_icon")  # Turnitin Status
data_session %>%html_nodes(".student_read_icon") %>%html_name()  # Turnitin Status
data_session %>%html_nodes(".student_read_icon") %>%html_attrs()  # Turnitin Status
data_session %>%html_nodes(".student_read_icon") %>%html_attr()  # Turnitin Status
data_session %>%html_nodes(".student_read_icon")  # Turnitin Status
data_session %>%html_nodes(".student_read_icon") %>%html_attr("alt")  # Turnitin Status
data_session %>%html_nodes(".c13") # Turnitin Status
data_session %>%html_nodes(".c13") %>% html_text() # Turnitin Status
data_session %>%html_nodes(".student_read_icon") %>% html_attr("title") # Turnitin Status
data_session %>%html_nodes(".c13") # Turnitin Status
data_session %>%html_nodes(".student_read_icon")  # Turnitin Status
ma <- data_session %>%html_nodes(".student_read_icon")  # Turnitin Status
ma %>% html_text()
ma %>% html_text2()
attr(ba)
attr(ma)
ma
data_session %>%html_nodes(".student_read_icon") %>% html_attr("alt") # Turnitin Status
ma[1]
print(ma[1])
as.string
as.character(ma[1])
data_session %>%html_nodes(".student_read_icon") %>% html_attr("title") # Turnitin Status
data_session %>%html_nodes(".student_read_icon") %>% html_attrs("title") # Turnitin Status
?html_attrs()
data_session %>%html_nodes(".student_read_icon") %>% html_attrs() # Turnitin Status
data_session %>%html_nodes(".student_read_icon") %>% html_attr("student_read_icon") # Turnitin Status
data_session %>%html_nodes(".student_read_icon")# Turnitin Status
turnitin_status <- data_session %>%html_nodes(".student_read_icon")# Turnitin Status
turnitin_text <-as.character(turnitin_status)
dim(turnitin_text)
turnitin_text
turnitin_text[1]
turnitin_text[2]
strsplit(turnitin_text[2], "title=\")
strsplit(turnitin_text[2], "title=\")
strsplit(turnitin_text[2], "title=")
strsplit(turnitin_text[2], "title=","src")
strsplit(turnitin_text[2], "title=","src")[2]
data_session %>%html_nodes(".c13") %>%html_text() # Turnitin Status
data_session %>%html_nodes(".c13")
turnitin_status <- data_session %>%html_nodes(".student_read_icon")# Turnitin Status
turnitin_status
data_session %>%html_nodes(".student_read_icon") %>%html_text("title")
data_session %>%html_nodes(".student_read_icon") %>%html_text("alt")
data_session %>%html_nodes(".student_read_icon") %>%html_text("*")
data_session %>%html_nodes(".student_read_icon") %>%html_text()
install.packages("altcheckr")
install.packages("remotes")
remotes::install_github("matt-dray/altcheckr")
install.packages("remotes")
remotes::install_github("matt-dray/altcheckr")
library(altcheckr)
turnitin_status %>%alt_get()
# Libraries
library(tidyverse)
library(rvest)
library(RSelenium)
library(httr)
library(stringr)
turnitin_status %>%alt_get()
data_session %>%alt_get(".student_read_icon")
turnitin_status %>%alt_check()
as.tibble(turnitin_status)
as.data.frame(turnitin_status)
# Libraries
library(tidyverse)
library(rvest)
library(httr)
library(stringr)
# Obtain web url of course page
site <- "https://moodle.gla.ac.uk/login/index.php"
# Create web session with login
session <- session(site)
form <- html_form(session)[[1]]
form$action <- "https://moodle.gla.ac.uk/login/index.php" # need to manually add this here for whatever reason
filled_form <- html_form_set(form,username="ca96r",password="Sophie12")
login_session <- session_submit(x=session,form=filled_form)
# Now, let's look at the main page for the data
data_page <- "https://moodle.gla.ac.uk/mod/assign/view.php?id=1562679&action=grading"
data_session <- login_session %>% session_jump_to("https://moodle.gla.ac.uk/mod/assign/view.php?id=1562679&action=grading")
turnitin_status <- data_session %>%html_nodes(".student_read_icon") # Turnitin Status
turnitin_text  <-as.character(turnitin_status)
grades <- data_session %>%html_nodes(".c13") %>%html_text() # Turnitin Status
grades
# Libraries
library(tidyverse)
library(rvest)
library(httr)
library(stringr)
turnitin_status
turnitin_text[1]
turnitin_text[2]
turnitin_text[70]
turnitin_text
grades
# Libraries
library(tidyverse)
library(rvest)
library(httr)
library(stringr)
# Obtain web url of course page
site <- "https://moodle.gla.ac.uk/login/index.php"
# Create web session with login
session <- session(site)
form <- html_form(session)[[1]]
form$action <- "https://moodle.gla.ac.uk/login/index.php" # need to manually add this here for whatever reason
filled_form <- html_form_set(form,username="ca96r",password="Sophie12")
login_session <- session_submit(x=session,form=filled_form)
# Now, let's look at the main page for the data
data_page <- "https://moodle.gla.ac.uk/mod/assign/view.php?id=1562679&action=grading"
data_session <- login_session %>% session_jump_to("https://moodle.gla.ac.uk/mod/assign/view.php?id=1562679&action=grading")
data_session
filled_form <- html_form_set(form,username="ca96r",password="Sophie12$")
login_session <- session_submit(x=session,form=filled_form)
login_session
starwars <- read_html("https://rvest.tidyverse.org/articles/starwars.html")
starwars
starwars %>%html_nodes("p")
starwars %>%html_node("p")
starwars %>%html_nodes("p")
starwars %>%html_nodes("p") %>% head()
starwars %>%html_nodes("p") %>% %>% html_text() %>%head()
starwars %>%html_nodes("p") %>%  html_text() %>%head()
starwars
films <- starwars %>% html_elements("section")
title <- films %>%html_element("h2")
title
?html_form_set
?session_submit
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Quiz%202%20Reassessment/DAS_Resit.RData"))
f1 %>% filter(year=="2017")
library(tidyverse)
f1 %>% filter(year=="2017")
yearlydata <- yearlydata %>% mutate(prop_internet=internetusers/population)
yearlydata %>% group_by(name)
Prop_country <- yearlydata %>% group_by(name)
ggplot(Prop_country,mapping = aes(x=year,y=prop_internet))
ggplot(Prop_country,mapping = aes(x=year,y=prop_internet)) + geom_point()
install.packages("CARBayes")
??register_google
library(ggmap)
register_google()
showing_key()
register_google(key="AIzaSyAzJZbI7XuD0Q1WhlEWz9k3XImPf5e8H9g")
google_key()
install.packages("xaringanthemer")
library(tidyverse)
starwars
starwars[2,1]
stations
plot(swisslakes$WaterTemp~swisslakes$AirTemp)
knitr::opts_chunk$set(echo = TRUE)
swisslakes <- read.table("data/swisslakes.dat", header=TRUE)
plot(swisslakes$WaterTemp~swisslakes$AirTemp)
library(mgcv)
m1 <- gam(WaterTemp~s(AirTemp, bs="cr")+factor(Depth), data=swisslakes)
summary(m1)
gam.check(m1)
ggplot(swisslakes,aes(x=AirTemp,y=WaterTemp)) + geom_point()
library(ggplot2)
ggplot(swisslakes,aes(x=AirTemp,y=WaterTemp)) + geom_point()
ggplot(swisslakes,aes(x=AirTemp,y=WaterTemp)) + geom_boxplot()
ggplot(swisslakes,aes(y=WaterTemp,group=Depth)) + geom_boxplot()
cyano <- read.table("data/cyano.dat", header=T, na.strings="*")
pairs(cyano)
pairs(cyano,upper.panel = NULL)
par(mfrow=c(2,4))
boxplot(cyano$lAltitude~cyano$PA, ylab="Altitude", xlab="Absence/Presence")
boxplot(cyano$lMeanDepth~cyano$PA, ylab="MeanDepth", xlab="Absence/Presence")
boxplot(cyano$lalkalinity~cyano$PA, ylab="Alkalinity", xlab="Absence/Presence")
boxplot(cyano$lcolour~cyano$PA, ylab="Colour", xlab="Absence/Presence")
boxplot(cyano$logtp~cyano$PA, ylab="logTP", xlab="Absence/Presence")
boxplot(cyano$meantemp~cyano$PA, ylab="MeanTemp", xlab="Absence/Presence")
pairs(cyano[,-1],upper.panel = NULL)
library(mgcv)
PA1 <- gam(PA~s(lAltitude, bs="cr")+s(lMeanDepth, bs="cr")+s(lalkalinity, bs="cr")+s(lcolour, bs="cr")+s(logtp, bs="cr")+s(meantemp, bs="cr"), family="binomial", data=cyano)
summary(PA1)
plot(PA1, residuals=TRUE, cex=3)
PA2 <- gam(PA~s(lMeanDepth, bs="cr")+s(lalkalinity, bs="cr")+s(lcolour, bs="cr")+s(logtp, bs="cr")+s(meantemp, bs="cr"), family="binomial", data=cyano)
anova(PA2, PA1, test="Chisq")
PA3 <- gam(PA~s(lalkalinity, bs="cr")+s(lcolour, bs="cr")+s(logtp, bs="cr")+s(meantemp, bs="cr"), family="binomial", data=cyano)
anova(PA3, PA2, test="Chisq")
PA4 <- gam(PA~s(lalkalinity, bs="cr")+s(lcolour, bs="cr")+s(meantemp, bs="cr"), family="binomial", data=cyano)
anova(PA4, PA3, test="Chisq")
PA5 <- gam(PA~s(lalkalinity, bs="cr")+s(lcolour, bs="cr"), family="binomial", data=cyano)
anova(PA5, PA4, test="Chisq")
AIC(PA1)
AIC(PA2)
AIC(PA3)
AIC(PA4)
AIC(PA5)
rbind(c(1, 5, 7),
c(2, 4, 2),
c(9, 0, 6))
cbind(c(1, 2, 9),
c(5, 4, 0),
c(7, 2, 6))
data <- read.csv(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/flow.csv"),na.strings="-")
view(data)
View(data)
n <- 10000
arrival <- 35+rexp(n, rate=0.2)
departure <- 40+rexp(n, rate=0.2)
number_of_missed <- sum(departure-arrival <=0)
number_of_missed
arrival
departure
arrival-departure
arrival-departure <=0
#the proportion of times you would have missed the 7:40 train
proportion_of_missed <- sum(departure-arrival <=0)/n
proportion_of_missed
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%201/starwars.RData"))
subset(starwars,name=="Luke Skywalker")$eye_color
han_solo_height <- subset(starwars,name=="Han Solo")$height
characters_taller <- subset(starwars,height>han_solo_height,na.rm=TRUE)
dim(characters_taller)[1]
starwars <- transform(starwars,BMI=10000*(mass/height**2)
)
starwars[which.max(starwars$BMI),]
Chewbacca_home_world <- subset(starwars,name=="Chewbacca")$homeworld
characters_same_home_world <- subset(starwars,homeworld==Chewbacca_home_world & name!="Chewbacca")$name
characters_same_home_world
subset(starwars,homeworld==Chewbacca_home_world & name!="Chewbacca")
load(url("http://www.stats.gla.ac.uk/~calexander/rp/a2resit.RData"))
f1 %>%
subset(year == 2017) %>%
group_by(driver) %>%
summarise()
library(tidyverse)
f1 %>%
subset(year == 2017) %>%
group_by(driver) %>%
summarise()
f1 %>%
subset(year == 2017) %>%
group_by(constructor) %>%
summarise()
f1 %>%
subset(position == 1) %>%
group_by(driver) %>%
summarise(n_wins = n()) %>%
arrange(desc(n_wins)) %>%
slice(1)
f1 %>%
group_by(driver, year) %>%
summarise(season_points = sum(points)) %>%
slice(which.max(season_points)) %>%
## Now slice the dataset by max value for each year
ungroup(driver, year) %>%
group_by(year) %>%
slice(which.max(season_points))
f1 %>%
inner_join(nationalities) %>%
subset(nationality == "Italian" & gpname == "Italian Grand Prix") %>%
nrow()
f1 %>%
+     inner_join(nationalities)
f1 %>%
inner_join(nationalities)
f2 <- f1 %>%
inner_join(nationalities)
f2$gpname
f2[f2$gpname=="Italian Grand Prix".]
f2[f2$gpname=="Italian Grand Prix",]
ba <- f2[f2$gpname=="Italian Grand Prix",]
table(ba$nationality[ba$nationality=="Italian"])
f1 %>%
inner_join(nationalities) %>%
subset(nationality == "Italian" & gpname == "Italian Grand Prix") %>%
nrow()
load(url("http://www.stats.gla.ac.uk/~calexander/rp/a2resit.RData"))
prost.data <- f1 %>%
filter(driver == "Prost") %>%
select(year, constructor)
## Now filter the whole dataset based on the same year AND constructor
f1 %>%
filter(year %in% prost.data$year & constructor %in% prost.data$constructor) %>%
filter(driver != "Prost") %>%
group_by(driver) %>%
summarise()
countries.df <- countries %>%
left_join(yearlydata)
head(countries.df)
pop.gdp.16 <- countries.df %>%
filter(year == 2016)
plot(log(gdp)~log(population), data = pop.gdp.16, col = 1+unclass(region),
xlab="Population", ylab="GDP(USD)")
pop.gdp.16%$%
legend("topleft", pch=1, col=1+1:nlevels(region), legend=levels(region))
library(magrittr)
pop.gdp.16 <- countries.df %>%
filter(year == 2016)
plot(log(gdp)~log(population), data = pop.gdp.16, col = 1+unclass(region),
xlab="Population", ylab="GDP(USD)")
pop.gdp.16%$%
legend("topleft", pch=1, col=1+1:nlevels(region), legend=levels(region))
ggplot(pop.gdp.16) +
aes(x=log(population), y=log(gdp)) +
geom_point(aes(colour = region)) +
xlab("Population") + ylab("GDP(USD)")
countries.df2 <- countries.df %>%
mutate(prop_internet = (internetusers/population))
head(countries.df2)
countries <- c("Sweden", "Russia", "United Kingdom", "South Korea", "Japan",
"Germany", "Singapore")
internet.plot <- countries.df2 %>%
filter(name %in% countries)
plot(prop_internet~year, data=internet.plot, type="l", lty=1, col=1+unclass(name),
xlab="Year", ylab="Proportion of Internet Users")
internet.plot %$%
legend("bottomright", pch=1, col=1+1:nlevels(name), legend=levels(name))
countries <- c("Sweden", "Russia", "United Kingdom", "South Korea", "Japan",
"Germany", "Singapore")
internet.plot <- countries.df2 %>%
filter(name %in% countries)
plot(prop_internet~year, data=internet.plot, type="l", lty=1, col=1+unclass(name),
xlab="Year", ylab="Proportion of Internet Users")
countries.df2 %>%
filter(name %in% countries)
plot(prop_internet~year, data=internet.plot, type="l", lty=1, col=1+unclass(name),
xlab="Year", ylab="Proportion of Internet Users")
ggplot(internet.plot) +
aes(x=year, y=prop_internet) +
geom_line(aes(colour = name)) +
xlab("Year") + ylab("Proportion of Internet Users") +
xlim(c(2014,2018))
174/3
555.56*6
10000/3
(17*0.3) + (21*0.2) + (20*0.2) + (19*0.3)
(17*0.3) + (18*0.2) + (16*0.2) + (17*0.3)
(14*0.3) + (20*0.2) + (16*0.2) + (0*0.3)
555.56*6
unlink("Library/CloudStorage/OneDrive-UniversityofGlasgow/Measurement and Scaling Course/Course Materials/Week 1/Lab 1/LabHandout1_cache", recursive = TRUE)
a <- 3
b <- 2
c <- a+b
c
a <- 3
b <- 2
c <- a+b
a <- 3
(17*0.3) + (18*0.2) + (16*0.2) + (16*0.3)
(6*0.3) + (11*0.2) + (4*0.2) + (10*0.3)
library(tidyverse)
a <- TRUE
b <- FALSE
c <- a & !b
c
a|(b&b)
a|b&b
(a|b)&b
x <- 3
x < 0
x <= 3
x >0 & x<2
a <- c(1,2,3)
a
b <- c(2,4,6)
c <- c(a,b)
b
c
names(a) <- c("one","two","three")
a
c
b <- c(3,4,6)
b
c
a[1]
a[1] <- 4
a
a[1] <- 4
c
c[c(1,2)]
c[1:4]
a <- c(1,2,3)
b <- c(3,4,6)
d <- a+b
d
a <- c(1,2,3,4)
b <- c(3,4)
d <- a+b
d
# This is a comment
this is a comment
seq(1,2,by=0.1)
seq(1,2,length.out=5)
rep(1,times=5)
rep(1:3,times=5)
library(tidyr)
gather()
?gather
pivot_longer()
bikes.mat %>%
gather(station_name, available_bikes, -time)
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Week%204/velib"))
library(dplyr)
bikes.mat %>%
gather(station_name, available_bikes, -time)
library(tidyr)
bikes.mat <- bikes.sm %>%
select(name, time, available_bikes) %>%
spread(name, available_bikes)
station.names <- c("DUPLEIX", "BOURSE", "JUSSIEU", "MONTPARNASSE")
bikes.sm <- bikes %>%
filter(name %in% station.names & time<=13.25) %>%
# Subset the stations
select(name, time, available_bikes, available_bike_stands)
# Reorder columns
bikes.sm
library(tidyr)
bikes.mat <- bikes.sm %>%
select(name, time, available_bikes) %>%
spread(name, available_bikes)
bikes.mat %>%
gather(station_name, available_bikes, -time)
bikes.mat %>%
pivot_longer(station_name, available_bikes, -time)
bikes.mat %>%
pivot_longer(station_name, available_bikes, -time)
?pivot_longer
bikes.mat %>%
gather(station_name, available_bikes, -time)
bikes.mat %>%
pivot_longer(c(station_name, available_bikes))
bikes.mat %>%
pivot_longer(c("station_name", "available_bikes"))
bikes.mat
(18*0.15)+(17*0.25)+(19*0.35)+(17*0.25)
(18*0.15)+(17*0.25)+(19*0.35)+(18*0.25)
(20*0.15)+(19*0.25)+(17*0.35)+(17*0.25)
(20*0.15)+(19*0.25)+(17*0.35)+(18*0.25)
A <- rbind(c(5,1,0,4),
c(4,0,6,7),
c(3,3,8,9),
c(1,1,1,1))
A
solve(A)
t(A)%*%A
setwd("~/Documents/GitHub/R/Assignment 1")
saheart <- read.csv("saheart.csv")
saheart
plot(saheart)
